apiVersion: apps/v1
kind: {{ .Values.appKind }}
metadata:
  name:  {{ .Values.appName | trunc 63 | trimSuffix "-" }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- if .Values.commonLabels }}
    {{- include "tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if eq .Values.appKind "Deployment" }}
  replicas: {{ .Values.deploymentReplicas }}
  {{ else }}
  {{- with .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml . | trim | nindent 4 }}
  {{- end }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "project.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if or .Values.podAnnotations .Values.commonAnnotations }}
      annotations:
        {{- if .Values.commonAnnotations }}
          {{- include "tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
          {{- end }}
          {{- if .Values.podAnnotations }}
          {{- include "tplvalues.render" ( dict "value" .Values.podAnnotations "context" $ ) | nindent 8 }}
          {{- end }}
          {{- end }}
      labels:
        {{- include "project.selectorLabels" . | nindent 8 }}
          {{- if .Values.commonLabels }}
          {{- include "tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
          {{- end }}
          {{- if .Values.podLabels }}
          {{- include "tplvalues.render" ( dict "value" .Values.podLabels "context" $ ) | nindent 8 }}
          {{- end }}
    spec:
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
      {{- with .Values.image.imagePullSecrets }}
      {{- toYaml . | trim | nindent 6 }}
      {{- end }}
      {{- end }}
      serviceAccountName: {{ .Values.appName | trunc 63 | trimSuffix "-" }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- else }}
      hostNetwork: false
      dnsPolicy: ClusterFirst
      {{- end }}
      restartPolicy: Always
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
      {{- include "tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 6 }}
      {{- else }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
              # Compatible with Kubernetes 1.12.x and 1.13.x
              - matchExpressions:
                  - key: beta.kubernetes.io/os
                    operator: In
                    values:
                      - linux
      {{- end }}
      containers:
        - name: {{ .Values.appName | trunc 63 | trimSuffix "-" }}
          image: {{ include "project.image" . | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/usr/bin/agent"]
          args:
            - "--app-mode=true"
            - "--tls-ca-cert=/etc/tls/ca.crt"
            - "--tls-ca-key=/etc/tls/ca.key"
            {{- if .Values.http.tlsIgnoreClientCert }}
            - "--tls-insecure=true"
            {{- else }}
            - "--tls-insecure=false"
            {{- end }}
          ports:
            - name: health
              containerPort: {{ .Values.http.healthPort }}
              protocol: TCP
            - name: http
              containerPort: {{ .Values.http.appHttpPort }}
              protocol: TCP
            - name: https
              containerPort: {{ .Values.http.appHttpsPort }}
              protocol: TCP
            - name: dns-udp
              containerPort: {{ .Values.dns.appDnsUdpPort }}
              protocol: UDP
            - name: dns-tcp
              containerPort: {{ .Values.dns.appDnsTcpPort }}
              protocol: TCP
            - name: dns-tcp-tls
              containerPort: {{ .Values.dns.appDnsTcpTlsPort }}
              protocol: TCP
          {{- if semverCompare ">=1.20-0" .Capabilities.KubeVersion.Version }}
          startupProbe:
            httpGet:
              path: /healthy/startup
              port: {{ .Values.http.healthPort }}
              scheme: HTTP
            failureThreshold: {{ .Values.http.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.http.startupProbe.periodSeconds }}
            successThreshold: 1
          {{- end }}
          livenessProbe:
            httpGet:
              path: /healthy/liveness
              port: {{ .Values.http.healthPort }}
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: {{ .Values.http.livenessProbe.periodSeconds }}
            successThreshold: 1
            failureThreshold: {{ .Values.http.livenessProbe.failureThreshold }}
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthy/readiness
              port: {{ .Values.http.healthPort }}
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: {{ .Values.http.readinessProbe.periodSeconds }}
            successThreshold: 1
            failureThreshold: {{ .Values.http.readinessProbe.failureThreshold }}
            timeoutSeconds: 5
          {{- with .Values.resources }}
          resources:
          {{- toYaml . | trim | nindent 12 }}
          {{- end }}
          env:
            - name: ENV_LOG_LEVEL
              value: "info"
            - name: ENV_AGENT_HEALTH_HTTP_PORT
              value: {{ .Values.http.healthPort | quote }}
            - name: ENV_AGENT_APP_HTTP_PORT
              value: {{ .Values.http.appHttpPort | quote }}
            - name: ENV_AGENT_APP_HTTPS_PORT
              value: {{ .Values.http.appHttpsPort | quote }}
            - name: ENV_AGENT_GRPC_LISTEN_PORT
              value: {{ .Values.grpcServer.port | quote }}
            - name: ENV_DNS_SERVICE_SELECT_LABEL_KEY
              value: {{ .Values.dns.coreDNSServiceLabelKey | quote }}
            - name: ENV_DNS_SERVICE_SELECT_LABEL_VALUE
              value: {{ .Values.dns.coreDNSServiceLabelValue | quote }}
            - name: ENV_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ENV_LOCAL_NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: ENV_LOCAL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: ENV_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- with .Values.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.securityContext }}
          securityContext:
          {{- toYaml . | nindent 10 }}
          {{- end }}
          volumeMounts:
            - mountPath: /etc/tls
              name: tls
      volumes:
        - name: tls
          projected:
            defaultMode: 0400
            sources:
              - secret:
                  items:
                    - key: tls.key
                      path: ca.key
                    - key: tls.crt
                      path: ca.crt
                  name: {{ .Values.appName }}
