// Copyright 2023 Authors of kdoctor-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package grpcManager is a generated GoMock package.
package grpcManager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agentGrpc "github.com/kdoctor-io/kdoctor/api/v1/agentGrpc"
)

// MockGrpcClientManager is a mock of GrpcClientManager interface.
type MockGrpcClientManager struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcClientManagerMockRecorder
}

// MockGrpcClientManagerMockRecorder is the mock recorder for MockGrpcClientManager.
type MockGrpcClientManagerMockRecorder struct {
	mock *MockGrpcClientManager
}

// NewMockGrpcClientManager creates a new mock instance.
func NewMockGrpcClientManager(ctrl *gomock.Controller) *MockGrpcClientManager {
	mock := &MockGrpcClientManager{ctrl: ctrl}
	mock.recorder = &MockGrpcClientManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcClientManager) EXPECT() *MockGrpcClientManagerMockRecorder {
	return m.recorder
}

// GetFileList mocks base method.
func (m *MockGrpcClientManager) GetFileList(ctx context.Context, serverAddress, directory string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileList", ctx, serverAddress, directory)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileList indicates an expected call of GetFileList.
func (mr *MockGrpcClientManagerMockRecorder) GetFileList(ctx, serverAddress, directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileList", reflect.TypeOf((*MockGrpcClientManager)(nil).GetFileList), ctx, serverAddress, directory)
}

// SaveRemoteFileToLocal mocks base method.
func (m *MockGrpcClientManager) SaveRemoteFileToLocal(ctx context.Context, serverAddress, remoteFilePath, localFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRemoteFileToLocal", ctx, serverAddress, remoteFilePath, localFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRemoteFileToLocal indicates an expected call of SaveRemoteFileToLocal.
func (mr *MockGrpcClientManagerMockRecorder) SaveRemoteFileToLocal(ctx, serverAddress, remoteFilePath, localFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRemoteFileToLocal", reflect.TypeOf((*MockGrpcClientManager)(nil).SaveRemoteFileToLocal), ctx, serverAddress, remoteFilePath, localFilePath)
}

// SendRequestForExecRequest mocks base method.
func (m *MockGrpcClientManager) SendRequestForExecRequest(ctx context.Context, serverAddress []string, requestList []*agentGrpc.ExecRequestMsg) ([]*agentGrpc.ExecResponseMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequestForExecRequest", ctx, serverAddress, requestList)
	ret0, _ := ret[0].([]*agentGrpc.ExecResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequestForExecRequest indicates an expected call of SendRequestForExecRequest.
func (mr *MockGrpcClientManagerMockRecorder) SendRequestForExecRequest(ctx, serverAddress, requestList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequestForExecRequest", reflect.TypeOf((*MockGrpcClientManager)(nil).SendRequestForExecRequest), ctx, serverAddress, requestList)
}
