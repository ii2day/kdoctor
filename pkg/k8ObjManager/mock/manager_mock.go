// Copyright 2023 Authors of kdoctor-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go

// Package k8sObjManager is a generated GoMock package.
package k8sObjManager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	k8sObjManager "github.com/kdoctor-io/kdoctor/pkg/k8ObjManager"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/api/networking/v1"
	v12 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockK8sObjManager is a mock of K8sObjManager interface.
type MockK8sObjManager struct {
	ctrl     *gomock.Controller
	recorder *MockK8sObjManagerMockRecorder
}

// MockK8sObjManagerMockRecorder is the mock recorder for MockK8sObjManager.
type MockK8sObjManagerMockRecorder struct {
	mock *MockK8sObjManager
}

// NewMockK8sObjManager creates a new mock instance.
func NewMockK8sObjManager(ctrl *gomock.Controller) *MockK8sObjManager {
	mock := &MockK8sObjManager{ctrl: ctrl}
	mock.recorder = &MockK8sObjManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sObjManager) EXPECT() *MockK8sObjManagerMockRecorder {
	return m.recorder
}

// GetConfigMap mocks base method.
func (m *MockK8sObjManager) GetConfigMap(ctx context.Context, name, namespace string) (*v10.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMap", ctx, name, namespace)
	ret0, _ := ret[0].(*v10.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap.
func (mr *MockK8sObjManagerMockRecorder) GetConfigMap(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockK8sObjManager)(nil).GetConfigMap), ctx, name, namespace)
}

// GetDaemonset mocks base method.
func (m *MockK8sObjManager) GetDaemonset(ctx context.Context, name, namespace string) (*v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonset", ctx, name, namespace)
	ret0, _ := ret[0].(*v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonset indicates an expected call of GetDaemonset.
func (mr *MockK8sObjManagerMockRecorder) GetDaemonset(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonset", reflect.TypeOf((*MockK8sObjManager)(nil).GetDaemonset), ctx, name, namespace)
}

// GetDeployment mocks base method.
func (m *MockK8sObjManager) GetDeployment(ctx context.Context, name, namespace string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, name, namespace)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockK8sObjManagerMockRecorder) GetDeployment(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockK8sObjManager)(nil).GetDeployment), ctx, name, namespace)
}

// GetIngress mocks base method.
func (m *MockK8sObjManager) GetIngress(ctx context.Context, name, namespace string) (*v11.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngress", ctx, name, namespace)
	ret0, _ := ret[0].(*v11.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngress indicates an expected call of GetIngress.
func (mr *MockK8sObjManagerMockRecorder) GetIngress(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngress", reflect.TypeOf((*MockK8sObjManager)(nil).GetIngress), ctx, name, namespace)
}

// GetNode mocks base method.
func (m *MockK8sObjManager) GetNode(ctx context.Context, nodeName string) (*v10.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, nodeName)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockK8sObjManagerMockRecorder) GetNode(ctx, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockK8sObjManager)(nil).GetNode), ctx, nodeName)
}

// GetNodeIP mocks base method.
func (m *MockK8sObjManager) GetNodeIP(ctx context.Context, nodeName string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeIP", ctx, nodeName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodeIP indicates an expected call of GetNodeIP.
func (mr *MockK8sObjManagerMockRecorder) GetNodeIP(ctx, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeIP", reflect.TypeOf((*MockK8sObjManager)(nil).GetNodeIP), ctx, nodeName)
}

// GetPodList mocks base method.
func (m *MockK8sObjManager) GetPodList(ctx context.Context, opts ...client.ListOption) ([]v10.Pod, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPodList", varargs...)
	ret0, _ := ret[0].([]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodList indicates an expected call of GetPodList.
func (mr *MockK8sObjManagerMockRecorder) GetPodList(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodList", reflect.TypeOf((*MockK8sObjManager)(nil).GetPodList), varargs...)
}

// GetSecret mocks base method.
func (m *MockK8sObjManager) GetSecret(ctx context.Context, name, namespace string) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, name, namespace)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockK8sObjManagerMockRecorder) GetSecret(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockK8sObjManager)(nil).GetSecret), ctx, name, namespace)
}

// GetService mocks base method.
func (m *MockK8sObjManager) GetService(ctx context.Context, name, namespace string) (*v10.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, name, namespace)
	ret0, _ := ret[0].(*v10.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockK8sObjManagerMockRecorder) GetService(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockK8sObjManager)(nil).GetService), ctx, name, namespace)
}

// GetServiceAccessUrl mocks base method.
func (m *MockK8sObjManager) GetServiceAccessUrl(ctx context.Context, name, namespace, portName string) (*k8sObjManager.ServiceAccessUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccessUrl", ctx, name, namespace, portName)
	ret0, _ := ret[0].(*k8sObjManager.ServiceAccessUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccessUrl indicates an expected call of GetServiceAccessUrl.
func (mr *MockK8sObjManagerMockRecorder) GetServiceAccessUrl(ctx, name, namespace, portName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccessUrl", reflect.TypeOf((*MockK8sObjManager)(nil).GetServiceAccessUrl), ctx, name, namespace, portName)
}

// ListDaemonsetPodIPs mocks base method.
func (m *MockK8sObjManager) ListDaemonsetPodIPs(ctx context.Context, daemonsetName, daemonsetNameSpace string) (k8sObjManager.PodIps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDaemonsetPodIPs", ctx, daemonsetName, daemonsetNameSpace)
	ret0, _ := ret[0].(k8sObjManager.PodIps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDaemonsetPodIPs indicates an expected call of ListDaemonsetPodIPs.
func (mr *MockK8sObjManagerMockRecorder) ListDaemonsetPodIPs(ctx, daemonsetName, daemonsetNameSpace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDaemonsetPodIPs", reflect.TypeOf((*MockK8sObjManager)(nil).ListDaemonsetPodIPs), ctx, daemonsetName, daemonsetNameSpace)
}

// ListDaemonsetPodMultusIPs mocks base method.
func (m *MockK8sObjManager) ListDaemonsetPodMultusIPs(ctx context.Context, daemonsetName, daemonsetNameSpace string) (k8sObjManager.PodIps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDaemonsetPodMultusIPs", ctx, daemonsetName, daemonsetNameSpace)
	ret0, _ := ret[0].(k8sObjManager.PodIps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDaemonsetPodMultusIPs indicates an expected call of ListDaemonsetPodMultusIPs.
func (mr *MockK8sObjManagerMockRecorder) ListDaemonsetPodMultusIPs(ctx, daemonsetName, daemonsetNameSpace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDaemonsetPodMultusIPs", reflect.TypeOf((*MockK8sObjManager)(nil).ListDaemonsetPodMultusIPs), ctx, daemonsetName, daemonsetNameSpace)
}

// ListDaemonsetPodNodes mocks base method.
func (m *MockK8sObjManager) ListDaemonsetPodNodes(ctx context.Context, daemonsetName, daemonsetNameSpace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDaemonsetPodNodes", ctx, daemonsetName, daemonsetNameSpace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDaemonsetPodNodes indicates an expected call of ListDaemonsetPodNodes.
func (mr *MockK8sObjManagerMockRecorder) ListDaemonsetPodNodes(ctx, daemonsetName, daemonsetNameSpace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDaemonsetPodNodes", reflect.TypeOf((*MockK8sObjManager)(nil).ListDaemonsetPodNodes), ctx, daemonsetName, daemonsetNameSpace)
}

// ListDeployPodMultusIPs mocks base method.
func (m *MockK8sObjManager) ListDeployPodMultusIPs(ctx context.Context, deploymentName, deploymentNameSpace string) (k8sObjManager.PodIps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployPodMultusIPs", ctx, deploymentName, deploymentNameSpace)
	ret0, _ := ret[0].(k8sObjManager.PodIps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployPodMultusIPs indicates an expected call of ListDeployPodMultusIPs.
func (mr *MockK8sObjManagerMockRecorder) ListDeployPodMultusIPs(ctx, deploymentName, deploymentNameSpace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployPodMultusIPs", reflect.TypeOf((*MockK8sObjManager)(nil).ListDeployPodMultusIPs), ctx, deploymentName, deploymentNameSpace)
}

// ListDeploymentPodIPs mocks base method.
func (m *MockK8sObjManager) ListDeploymentPodIPs(ctx context.Context, deploymentName, deploymentNameSpace string) (k8sObjManager.PodIps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentPodIPs", ctx, deploymentName, deploymentNameSpace)
	ret0, _ := ret[0].(k8sObjManager.PodIps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentPodIPs indicates an expected call of ListDeploymentPodIPs.
func (mr *MockK8sObjManagerMockRecorder) ListDeploymentPodIPs(ctx, deploymentName, deploymentNameSpace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentPodIPs", reflect.TypeOf((*MockK8sObjManager)(nil).ListDeploymentPodIPs), ctx, deploymentName, deploymentNameSpace)
}

// ListNodes mocks base method.
func (m *MockK8sObjManager) ListNodes(ctx context.Context, opts ...client.ListOption) (*v10.NodeList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodes", varargs...)
	ret0, _ := ret[0].(*v10.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockK8sObjManagerMockRecorder) ListNodes(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockK8sObjManager)(nil).ListNodes), varargs...)
}

// ListSelectedNodes mocks base method.
func (m *MockK8sObjManager) ListSelectedNodes(ctx context.Context, labelSelector *v12.LabelSelector) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedNodes", ctx, labelSelector)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectedNodes indicates an expected call of ListSelectedNodes.
func (mr *MockK8sObjManagerMockRecorder) ListSelectedNodes(ctx, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedNodes", reflect.TypeOf((*MockK8sObjManager)(nil).ListSelectedNodes), ctx, labelSelector)
}

// ListSelectedPod mocks base method.
func (m *MockK8sObjManager) ListSelectedPod(ctx context.Context, labelSelector *v12.LabelSelector) ([]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedPod", ctx, labelSelector)
	ret0, _ := ret[0].([]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectedPod indicates an expected call of ListSelectedPod.
func (mr *MockK8sObjManagerMockRecorder) ListSelectedPod(ctx, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedPod", reflect.TypeOf((*MockK8sObjManager)(nil).ListSelectedPod), ctx, labelSelector)
}

// ListSelectedPodIPs mocks base method.
func (m *MockK8sObjManager) ListSelectedPodIPs(ctx context.Context, labelSelector *v12.LabelSelector) (k8sObjManager.PodIps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedPodIPs", ctx, labelSelector)
	ret0, _ := ret[0].(k8sObjManager.PodIps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectedPodIPs indicates an expected call of ListSelectedPodIPs.
func (mr *MockK8sObjManagerMockRecorder) ListSelectedPodIPs(ctx, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedPodIPs", reflect.TypeOf((*MockK8sObjManager)(nil).ListSelectedPodIPs), ctx, labelSelector)
}

// ListSelectedPodMultusIPs mocks base method.
func (m *MockK8sObjManager) ListSelectedPodMultusIPs(ctx context.Context, labelSelector *v12.LabelSelector) (k8sObjManager.PodIps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedPodMultusIPs", ctx, labelSelector)
	ret0, _ := ret[0].(k8sObjManager.PodIps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectedPodMultusIPs indicates an expected call of ListSelectedPodMultusIPs.
func (mr *MockK8sObjManagerMockRecorder) ListSelectedPodMultusIPs(ctx, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedPodMultusIPs", reflect.TypeOf((*MockK8sObjManager)(nil).ListSelectedPodMultusIPs), ctx, labelSelector)
}

// ListServicesDnsIP mocks base method.
func (m *MockK8sObjManager) ListServicesDnsIP(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesDnsIP", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesDnsIP indicates an expected call of ListServicesDnsIP.
func (mr *MockK8sObjManagerMockRecorder) ListServicesDnsIP(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesDnsIP", reflect.TypeOf((*MockK8sObjManager)(nil).ListServicesDnsIP), ctx)
}

// MatchNodeSelected mocks base method.
func (m *MockK8sObjManager) MatchNodeSelected(ctx context.Context, nodeName string, labelSelector *v12.LabelSelector) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchNodeSelected", ctx, nodeName, labelSelector)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchNodeSelected indicates an expected call of MatchNodeSelected.
func (mr *MockK8sObjManagerMockRecorder) MatchNodeSelected(ctx, nodeName, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchNodeSelected", reflect.TypeOf((*MockK8sObjManager)(nil).MatchNodeSelected), ctx, nodeName, labelSelector)
}
